{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","console","log","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","result","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    console.log('query called');\n    console.log('options is --')\n    console.log(options);\n    var query = this.buildQueryParameters(options);\n    console.log(\"query after buildQueryParameters -- \")\n    console.log(query);\n    query.targets = query.targets.filter(t => !t.hide);\n    console.log(\"query after query.targets filter on not t.hide -- \")\n    console.log(query)\n\n    if (query.targets.length <= 0) {\n      console.log(\"In the if where query.targets.length is 0\");\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/render',\n      data: query,\n      method: 'POST'\n    }).then(result => {\n      console.log(\"Here's the result from backend server ---------\")\n      console.log(result);\n      return result;\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/metrics/find',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}